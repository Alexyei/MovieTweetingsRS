// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      Int               @id @default(autoincrement())
  email   String?           @unique
  name    String?
  ratings Rating[]
  events  UserEvent[]
  sources UsersSimilarity[] @relation("SourceRelation")
  targets UsersSimilarity[] @relation("TargetRelation")
}

model Movie {
  id          String             @id
  title       String
  year        Int
  description String?
  poster_path String?
  genres      Genre[]
  ratings     Rating[]
  events      UserEvent[]
  sources     MoviesSimilarity[] @relation("SourceRelation")
  targets     MoviesSimilarity[] @relation("TargetRelation")
}

model Genre {
  id     Int         @id @default(autoincrement())
  name   String      @unique
  movies Movie[]
  events UserEvent[]
}

model Rating {
  id        Int        @id @default(autoincrement())
  author    User       @relation(fields: [authorId], references: [id])
  authorId  Int
  movie     Movie      @relation(fields: [movieId], references: [id])
  movieId   String
  rating    Int
  type      RatingType @default(EXPLICIT)
  createdAt DateTime   @default(now())
}

// Пользователь может просматривать либо фильм либо целую категорию
model UserEvent {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  movie     Movie?    @relation(fields: [movieId], references: [id])
  movieId   String?
  genre     Genre?    @relation(fields: [genreId], references: [id])
  genreId   Int?
  event     TypeEvent
  createdAt DateTime  @default(now())
  sessionId Int?
}

model MoviesSimilarity {
  id          Int            @id @default(autoincrement())
  sourceMovie Movie          @relation("SourceRelation", fields: [source], references: [id])
  source      String
  targetMovie Movie          @relation("TargetRelation", fields: [target], references: [id])
  target      String
  similarity  Float
  type        SimilarityType
  createdAt   DateTime       @default(now())

  @@unique([source, target])
}

model UsersSimilarity {
  id         Int            @id @default(autoincrement())
  sourceUser User           @relation("SourceRelation", fields: [source], references: [id])
  source     Int
  targetUser User           @relation("TargetRelation", fields: [target], references: [id])
  target     Int
  similarity Float
  type       SimilarityType
  createdAt  DateTime       @default(now())

  @@unique([source, target])
}

// --------------------------------TESTING--------------------------------

model TestUser {
  id      Int                   @id @default(autoincrement())
  email   String?               @unique
  name    String?
  ratings TestRating[]
  events  TestUserEvent[]
  sources TestUsersSimilarity[] @relation("SourceRelation")
  targets TestUsersSimilarity[] @relation("TargetRelation")
}

model TestMovie {
  id          String                 @id
  title       String
  year        Int
  description String?
  poster_path String?
  genres      TestGenre[]
  ratings     TestRating[]
  events      TestUserEvent[]
  sources     TestMoviesSimilarity[] @relation("SourceRelation")
  targets     TestMoviesSimilarity[] @relation("TargetRelation")
}

model TestGenre {
  id     Int             @id @default(autoincrement())
  name   String          @unique
  movies TestMovie[]
  events TestUserEvent[]
}

model TestRating {
  id        Int        @id @default(autoincrement())
  author    TestUser   @relation(fields: [authorId], references: [id])
  authorId  Int
  movie     TestMovie  @relation(fields: [movieId], references: [id])
  movieId   String
  rating    Float
  type      RatingType @default(EXPLICIT)
  createdAt DateTime   @default(now())
}

// Пользователь может просматривать либо фильм либо целую категорию
model TestUserEvent {
  id        Int        @id @default(autoincrement())
  user      TestUser   @relation(fields: [userId], references: [id])
  userId    Int
  movie     TestMovie? @relation(fields: [movieId], references: [id])
  movieId   String?
  genre     TestGenre? @relation(fields: [genreId], references: [id])
  genreId   Int?
  event     TypeEvent
  createdAt DateTime   @default(now())
  sessionId Int?
}

model TestMoviesSimilarity {
  id          Int            @id @default(autoincrement())
  sourceMovie TestMovie      @relation("SourceRelation", fields: [source], references: [id])
  source      String
  targetMovie TestMovie      @relation("TargetRelation", fields: [target], references: [id])
  target      String
  similarity  Float
  type        SimilarityType
  createdAt   DateTime       @default(now())

  @@unique([source, target])
}

model TestUsersSimilarity {
  id         Int            @id @default(autoincrement())
  sourceUser TestUser       @relation("SourceRelation", fields: [source], references: [id])
  source     Int
  targetUser TestUser       @relation("TargetRelation", fields: [target], references: [id])
  target     Int
  similarity Float
  type       SimilarityType
  createdAt  DateTime       @default(now())

  @@unique([source, target])
}

// --------------------------------ENUMS--------------------------------

enum TypeEvent {
  GENRE_VIEW
  DETAILS
  MORE_DETAILS
  ADD_TO_FAVORITES_LIST
  REMOVE_FROM_FAVORITES_LIST
  BUY
}

enum RatingType {
  EXPLICIT
  IMPLICIT
}

enum SimilarityType {
  OTIAI
  COSINE
  PEARSON
}
